/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define HOST_OS 2
#include "../helper.h"

#define DEFAULT   0
#define LOWER      1
#define RAISE     2
#define BOTH       3

/* German umlauts */
ZMK_UNICODE_PAIR(   de_ae,      N0, N0,  E, N4,    N0, N0,  C, N4)
ZMK_UNICODE_PAIR(   de_oe,      N0, N0,  F, N6,    N0, N0,  D, N6)
ZMK_UNICODE_PAIR(   de_ue,      N0, N0,  F,  C,    N0, N0,  D,  C)
ZMK_UNICODE_SINGLE( de_eszett,  N0, N0,  D,  F)

// euro sign
ZMK_UNICODE_SINGLE(euro_sign, N2, N0, A, C)  // â‚¬

#define CTRL_ALT_CMD_MACRO(NAME, KEY) \
        macro_##NAME: macro_##NAME { \
                label = "ZM_macro_##NAME"; \
                compatible = "zmk,behavior-macro"; \
                #binding-cells = <0>; \
                bindings \
                        = <&macro_press &kp LCTRL &kp LALT &kp LGUI> \
                        , <&macro_tap &kp KEY> \
                        , <&macro_release &kp LCTRL &kp LALT &kp LGUI> \
                                ; \
        };

#define MACRO(name, key)                  \
    name: name##_macro {                   \
        label = #name;                     \
        compatible = "zmk,behavior-macro"; \
        wait-ms = <1>;                     \
        tap-ms = <1>;                      \
        #binding-cells = <0>;              \
        bindings = <&macro_press &kp LCTRL &kp LALT &kp LGUI> \
                , <&macro_tap &kp key> \
                , <&macro_release &kp LCTRL &kp LALT &kp LGUI> ; \
    };

/ {
        macros {
                cut: cut {
                        label = "ZM_cut";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LGUI>
                                , <&macro_tap &kp X>
                                , <&macro_release &kp LGUI>
                                ;
                };
                copy: copy {
                        label = "ZM_copy";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LGUI>
                                , <&macro_tap &kp C>
                                , <&macro_release &kp LGUI>
                                ;
                };
                paste: paste {
                        label = "ZM_paste";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LGUI>
                                , <&macro_tap &kp V>
                                , <&macro_release &kp LGUI>
                                ;
                };
                MACRO(macro_a, A)
                MACRO(macro_s, S)
                MACRO(macro_d, D)
                MACRO(macro_f, F)
                MACRO(macro_g, G)
                MACRO(macro_z, Z)
                MACRO(macro_x, X)
                MACRO(macro_c, C)
                MACRO(macro_v, V)
                MACRO(macro_b, B)
                MACRO(macro_e, E)
                MACRO(macro_r, R)
                MACRO(macro_t, T)
                MACRO(macro_n, N)
                MACRO(macro_m, M)
                MACRO(macro_comma, COMMA)
                MACRO(macro_dot, DOT)
        };
        conditional_layers {
          compatible = "zmk,conditional-layers";
          both_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <BOTH>;
          };
        };
        combos {
                compatible = "zmk,combos";
                combo_esc {
                        timeout-ms = <50>;
                        key-positions = <1 2>;
                        bindings = <&kp ESC>;
                };
                combo_backspace {
                        timeout-ms = <50>;
                        key-positions = <8 9>;
                        bindings = <&kp BSPC>;
                };
                combo_delete {
                        timeout-ms = <50>;
                        key-positions = <9 10>;
                        bindings = <&kp DEL>;
                };
                combo_tab {
                        timeout-ms = <50>;
                        key-positions = <13 14>;
                        bindings = <&kp TAB>;
                };
                combo_enter {
                        timeout-ms = <50>;
                        key-positions = <20 21>;
                        bindings = <&kp RET>;
                };
                combo_semi {
                        timeout-ms = <50>;
                        key-positions = <21 22>;
                        bindings = <&kp SEMI>;
                };
                combo_bslh {
                        timeout-ms = <50>;
                        key-positions = <33 34>;
                        bindings = <&kp BSLH>;
                };
        };
        ht_bl: hold_tap_balanced {
                compatible = "zmk,behavior-hold-tap";
                label = "HOLD_TAP_BALANCED";
                #binding-cells = <2>;
                flavor = "balanced";
                tapping-term-ms = <200>;
                quick-tap-ms = <200>;
                bindings = <&kp>, <&kp>;
        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                  bindings = <
// ------------------------------------------------------------------------------------------------------------------------------------------------
//  |     Q     |     W     |     E     |     R     |     T     |     |     Y     |     U     |     I     |     O     |     P     |
&kp ESC      &kp Q       &kp W       &kp E       &kp R       &kp T             &kp Y       &kp U       &kp I       &kp O       &kp P &kp ESC

//  |     A     |     S     |     D     |     F     |     G     |     |     H     |     J     |     K     |     L     |     '/"     |
 &kp ESC     &kp A       &kp S       &ht_bl LALT D       &ht_bl LGUI F       &kp G             &kp H       &ht_bl RGUI J       &ht_bl RALT K       &kp L       &kp SQT &kp ESC


//  |     Z     |     X     |     C     |     V     |     B     |     |     N     |     M     |     ,     |     .     |     /     |
 &kp ESC     &kp Z       &kp X       &kp C       &kp V       &kp B             &kp N       &kp M       &kp COMMA   &kp DOT     &kp FSLH &kp ESC


//                          |  ALT/ESC  | LEFT/BKSP | CTRL/SPC  |     | SHIFT/ENT| RIGHT/TAB |  CMD/DEL  |
                          &mt LALT ESC &lt LOWER SPACE &mt LCTRL RET     &lt RAISE TAB  &mt RSHFT BSPC  &mt LGUI &caps_word
                  >;
                };

                lower_layer {
                  bindings = <
// ------------------------------------------------------------------------------------------------------------------------------------------------
//  |     1     |     2     |     3     |     4     |     5     |     |     6     |     7     |     8     |     9     |     0     |
  &kp ESC    &kp N1      &kp N2      &kp N3      &kp N4      &kp N5            &kp N6      &kp N7      &kp N8      &kp N9      &kp N0 &kp ESC


//  |     A     |     S     |     D     |     F     |     G     |     |     -/_   |     =/+   |     [/{   |     ]/}   |     ;/:   |
  &kp ESC  &de_ae  &de_eszett  &de_oe  &de_ue  &euro_sign             &kp MINUS   &kp EQUAL   &kp LBKT    &kp RBKT    &kp SEMI &kp ESC


//  |     Z     |     X     |     C     |     V     |     B     |     |     N     |     M     |     ,     |     `/~   |     \/"|" |
  &kp ESC     &trans  &cut  &copy  &paste  &trans              &kp BSPC       &kp GRAVE       &kp COMMA   &kp DOT   &kp BSLH &kp ESC


//                          |  ALT/ESC  | LEFT/BKSP | CTRL/ENT  |     | SHIFT/SPC | RIGHT/TAB |  CMD/DEL  |
                                            &trans  &trans  &trans  &trans  &trans  &trans  
                  >;
                };

                raise_layer {
                  bindings = <
// ------------------------------------------------------------------------------------------------------------------------------------------------
//  |     1     |     2     |     3     |     4     |     5     |     |     6     |     7     |     8     |     9     |     0     |
  &kp ESC     &kp C_BRI_DN  &kp C_BRI_UP  &macro_e      &macro_r      &macro_t            &kp C_PREV      &kp C_PP      &kp C_NEXT      &kp C_VOL_DN      &kp C_VOL_UP &kp ESC

//  |     Ae     |     Se     |     Oe     |     Ue     |     G     |     |     LEFT   |     DOWN   |     UP   |     RIGHT   |     '/"   |
  &kp ESC     &macro_a  &macro_s  &macro_d  &macro_f  &macro_g              &kp LEFT   &kp DOWN   &kp UP    &kp RIGHT    &kp RGUI &kp ESC

//  |     Z     |     X     |     C     |     V     |     B     |     |     N     |     M     |     ,     |     .   |     \/"|" |
  &kp ESC     &macro_z  &macro_x  &macro_c  &macro_v  &macro_b              &macro_n        &macro_m       &macro_comma   &macro_dot   &kp RSHFT &kp ESC

//                          |  ALT/ESC  | LEFT/BKSP | CTRL/ENT  |     | SHIFT/SPC | RIGHT/TAB |  CMD/DEL  |
                                            &trans  &trans  &trans  &trans  &trans  &trans  
                                            >;
                };

                both_layer {
                  bindings = <
// ------------------------------------------------------------------------------------------------------------------------------------------------
//  |     1     |     2     |     3     |     4     |     5     |     |     6     |     7     |     8     |     9     |     0     |
   &kp ESC    &kp C_BRI_DN  &kp C_BRI_UP  &kp N3      &kp N4      &kp N5            &kp C_PREV      &kp C_PP      &kp C_NEXT      &kp C_VOL_DN      &kp C_VOL_UP &kp ESC

//  |     Ae     |     Se     |     Oe     |     Ue     |     G     |     |     LEFT   |     DOWN   |     UP   |     RIGHT   |     '/"   |
  &kp ESC  &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3             &kp LEFT   &kp DOWN   &kp UP    &kp RIGHT    &kp SQT &kp ESC

//  |     Z     |     X     |     C     |     V     |     B     |     |     N     |     M     |     ,     |     `/~   |     \/"|" |
  &kp ESC     &trans  &trans  &trans  &trans  &trans              &trans        &trans       &kp COMMA   &kp GRAVE   &kp BSLH &kp ESC

//                          |  ALT/ESC  | LEFT/BKSP | CTRL/ENT  |     | SHIFT/SPC | RIGHT/TAB |  CMD/DEL  |
                                            &trans  &trans  &trans  &trans  &trans  &trans  
                  >;
                };




        };

};
