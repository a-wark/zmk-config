/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define HOST_OS 2
#include "../helper.h"

// key numbers
//    ╭────┬────┬────┬────┬────╮ ╭────┬────┬────┬────┬────╮
//  0 |  1 |  2 |  3 |  4 |  5 | |  6 |  7 |  8 |  9 | 10 | 11
//    ├────┼────┼────┼────┼────┤ ├────┼────┼────┼────┼────┤
// 12 | 13 | 14 | 15 | 16 | 17 | | 18 | 19 | 20 | 21 | 22 | 23
//    ├────┼────┼────┼────┼────┤ ├────┼────┼────┼────┼────┤
// 24 | 25 | 26 | 27 | 28 | 29 | | 30 | 31 | 32 | 33 | 34 | 35
//    ╰────┴────┼────┼────┼────┤ ├────┼────┼────┼────┴────╯
//              | 36 | 37 | 38 | | 39 | 40 | 41 |
//              ╰────┴────┴────╯ ╰────┴────┴────╯

#define DEFAULT    0
#define CONTROL    1
#define MOD_LEFT   2
#define NAV        3
#define SYMBOLS    4
#define MOD_RIGHT  5
#define TWO_MIDDLE 6

/* German umlauts */
ZMK_UNICODE_PAIR(   de_ae,      N0, N0,  E, N4,    N0, N0,  C, N4)
ZMK_UNICODE_PAIR(   de_oe,      N0, N0,  F, N6,    N0, N0,  D, N6)
ZMK_UNICODE_PAIR(   de_ue,      N0, N0,  F,  C,    N0, N0,  D,  C)
ZMK_UNICODE_SINGLE( de_eszett,  N0, N0,  D,  F)

// euro sign
ZMK_UNICODE_SINGLE(euro_sign, N2, N0, A, C)  // €

#define CTRL_ALT_CMD_MACRO(NAME, KEY) \
        macro_##NAME: macro_##NAME { \
                label = "ZM_macro_##NAME"; \
                compatible = "zmk,behavior-macro"; \
                #binding-cells = <0>; \
                bindings \
                        = <&macro_press &kp LCTRL &kp LALT &kp LGUI> \
                        , <&macro_tap &kp KEY> \
                        , <&macro_release &kp LCTRL &kp LALT &kp LGUI> \
                                ; \
        };

#define MACRO(name, key)                  \
    name: name##_macro {                   \
        label = #name;                     \
        compatible = "zmk,behavior-macro"; \
        wait-ms = <1>;                     \
        tap-ms = <1>;                      \
        #binding-cells = <0>;              \
        bindings = <&macro_press &kp LCTRL &kp LALT &kp LGUI> \
                , <&macro_tap &kp key> \
                , <&macro_release &kp LCTRL &kp LALT &kp LGUI> ; \
    };

/ {
        macros {
                cmd_z: cmd_z {
                        label = "ZM_cmd_z";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LGUI>
                                , <&macro_tap &kp Z>
                                , <&macro_release &kp LGUI>
                                ;
                };
                cmd_x: cmd_x {
                        label = "ZM_cmd_x";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LGUI>
                                , <&macro_tap &kp X>
                                , <&macro_release &kp LGUI>
                                ;
                };
                cmd_c: cmd_c {
                        label = "ZM_cmd_c";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LGUI>
                                , <&macro_tap &kp C>
                                , <&macro_release &kp LGUI>
                                ;
                };
                cmd_v: cmd_v {
                        label = "cmd_v";
                        compatible = "zmk,behavior-macro";
                        #binding-cells = <0>;
                        bindings
                                = <&macro_press &kp LGUI>
                                , <&macro_tap &kp V>
                                , <&macro_release &kp LGUI>
                                ;
                };
                MACRO(macro_a, A)
                MACRO(macro_s, S)
                MACRO(macro_d, D)
                MACRO(macro_f, F)
                MACRO(macro_g, G)
                MACRO(macro_z, Z)
                MACRO(macro_x, X)
                MACRO(macro_c, C)
                MACRO(macro_v, V)
                MACRO(macro_b, B)
                MACRO(macro_q, Q)
                MACRO(macro_w, W)
                MACRO(macro_e, E)
                MACRO(macro_r, R)
                MACRO(macro_t, T)
                MACRO(macro_y, Y)
                MACRO(macro_u, U)
                MACRO(macro_i, I)
                MACRO(macro_o, O)
                MACRO(macro_p, P)
                MACRO(macro_h, H)
                MACRO(macro_j, J)
                MACRO(macro_k, K)
                MACRO(macro_l, L)
                MACRO(macro_single_quote, SINGLE_QUOTE)
                MACRO(macro_n, N)
                MACRO(macro_m, M)
                MACRO(macro_comma, COMMA)
                MACRO(macro_dot, DOT)
                MACRO(macro_slash, SLASH)
        };
        conditional_layers {
          compatible = "zmk,conditional-layers";
          both_layer {
            if-layers = <MOD_LEFT SYMBOLS>;
            then-layer = <TWO_MIDDLE>;
          };
        };
        combos {
                compatible = "zmk,combos";
                combo_qu {
                        timeout-ms = <50>;
                        key-positions = <1 2>;
                        bindings = <&kp Q &kp U>;
                };
                combo_esc {
                        timeout-ms = <50>;
                        key-positions = <2 3>;
                        bindings = <&kp ESC>;
                };
                combo_backspace {
                        timeout-ms = <50>;
                        key-positions = <8 9>;
                        bindings = <&kp BSPC>;
                };
                combo_delete {
                        timeout-ms = <50>;
                        key-positions = <9 10>;
                        bindings = <&kp DEL>;
                };
                combo_tab {
                        timeout-ms = <50>;
                        key-positions = <26 27>;
                        bindings = <&kp TAB>;
                };
                combo_enter {
                        timeout-ms = <50>;
                        key-positions = <32 33>;
                        bindings = <&kp RET>;
                };
//                combo_caps_word {
//                        timeout-ms = <50>;
//                        key-positions = <25 26>;
//                        bindings = <&caps_word>;
//                };
//                combo_ctrl_a {
//                        timeout-ms = <50>;
//                        key-positions = <13 14>;
//                        bindings = <&kp LC(A)>;
//                };
//                combo_semi {
//                        timeout-ms = <50>;
//                        key-positions = <21 22>;
//                        bindings = <&kp SEMI>;
//                };
//                combo_bslh {
//                        timeout-ms = <50>;
//                        key-positions = <33 34>;
//                        bindings = <&kp BSLH>;
//                };
        };
        ht_bl: hold_tap_balanced {
                compatible = "zmk,behavior-hold-tap";
                label = "HOLD_TAP_BALANCED";
                #binding-cells = <2>;
                flavor = "balanced";
                tapping-term-ms = <200>;
                quick-tap-ms = <200>;
                bindings = <&kp>, <&kp>;
        };
        behaviors {
                skq: behavior_sk_quick_release {
                        compatible = "zmk,behavior-sticky-key";
                        label = "BEHAVIOR_SKQ";
                        #binding-cells = <1>;
                        bindings = <&kp>;
                        release-after-ms = <1000>;
                        quick-release;
                        ignore-modifiers;
                };
                mo_sk: behavior_mo_sk {
                        compatible = "zmk,behavior-hold-tap";
                        label = "BEHAVIOR_MO_SK";
                        #binding-cells = <2>;
                        flavor = "balanced";
                        tapping-term-ms = <200>;
                        quick-tap-ms = <200>;
                        bindings = <&mo>, <&skq>;
                };
                swap_window: swap_window {
                        compatible = "zmk,behavior-tri-state";
                        label = "SWAPPER";
                        #binding-cells = <0>;
                        bindings = <&kt LALT>, <&kp N>, <&kt LALT>;
                };
        };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                  bindings = <
//      ╭────┬────┬────┬────┬────╮ ╭────┬────┬────┬────┬────╮
// NONE |  Q |  W |  E |  R |  T | |  Y |  U |  I |  O |  P | NONE
//      ├────┼────┼────┼────┼────┤ ├────┼────┼────┼────┼────┤
// NONE |  A |  S |  D |  F |  G | |  H |  J |  K |  L | ' "| NONE
//      ├────┼────┼────┼────┼────┤ ├────┼────┼────┼────┼────┤
// NONE |  Z |  X |  C |  V |  B | |  N |  M | , <| . >| / ?| NONE
//      ╰────┴────┼────┼────┼────┤ ├────┼────┼────┼────┴────╯
//                |    |    |    | |    |    |    |
//                ╰────┴────┴────╯ ╰────┴────┴────╯

// ------------------------------------------------------------------------------------------------------------------------------------------------
//  |     Q     |     W     |     E     |     R     |     T     |     |     Y     |     U     |     I     |     O     |     P     |
&kp ESC      &kp Q       &kp W       &kp E       &kp R       &kp T             &kp Y       &kp U       &kp I       &kp O       &kp P &kp ESC

//  |     A     |     S     |     D     |     F     |     G     |     |     H     |     J     |     K     |     L     |     '/"     |
 &kp ESC     &kp A       &kp S       &kp D       &kp F       &kp G             &kp H       &kp J       &kp K       &kp L       &kp SQT &kp ESC


//  |     Z     |     X     |     C     |     V     |     B     |     |     N     |     M     |     ,     |     .     |     /     |
 &kp ESC     &kp Z       &kp X       &kp C       &kp V       &kp B             &kp N       &kp M       &kp COMMA   &kp DOT     &kp FSLH &kp ESC


//                          |  ALT/ESC  | LEFT/BKSP | CTRL/SPC  |     | SHIFT/ENT| RIGHT/TAB |  CMD/DEL  |
                          &lt CONTROL ESC &lt MOD_LEFT SPACE &mt LCTRL RET     &lt NAV TAB  &mo_sk SYMBOLS RSHFT  &lt MOD_RIGHT CAPSLOCK
                  >;
                };

                control_layer {
                  bindings = <
// ------------------------------------------------------------------------------------------------------------------------------------------------
//  |     1     |     2     |     3     |     4     |     5     |     |     6     |     7     |     8     |     9     |     0     |
  &kp ESC     &macro_q  &macro_w  &macro_e      &macro_r      &macro_t            &macro_y      &macro_u      &macro_i      &macro_o     &macro_p &kp ESC

//  |     Ae     |     Se     |     Oe     |     Ue     |     G     |     |     LEFT   |     DOWN   |     UP   |     RIGHT   |     '/"   |
  &kp ESC     &macro_a  &macro_s  &macro_d  &macro_f  &swap_window              &macro_h   &macro_j   &macro_k    &macro_l    &macro_single_quote &kp ESC

//  |     Z     |     X     |     C     |     V     |     B     |     |     N     |     M     |     ,     |     .   |     \/"|" |
  &kp ESC     &macro_z  &macro_x  &macro_c  &macro_v  &macro_b              &macro_n        &macro_m       &macro_comma   &macro_dot   &macro_slash &kp ESC

//                          |  ALT/ESC  | LEFT/BKSP | CTRL/ENT  |     | SHIFT/SPC | RIGHT/TAB |  CMD/DEL  |
                                            &trans  &trans  &trans  &trans  &trans  &trans  
                                            >;
                };

                modifier_left_layer {
                  bindings = <
//      ╭─────────┬─────────┬─────────┬─────────┬─────────╮ ╭─────────┬─────────┬─────────┬─────────┬─────────╮
// NONE | ESC     | CTRL A  |         |         | BSPC    | | 6       | 7       | 8       | 9       | 5       | NONE
//      ├─────────┼─────────┼─────────┼─────────┼─────────┤ ├─────────┼─────────┼─────────┼─────────┼─────────┤
// NONE | TAB     | OS CTRL | OS ALT  | OS GUI  | RET     | | 0       | 1       | 2       | 3       | 4       | NONE
//      ├─────────┼─────────┼─────────┼─────────┼─────────┤ ├─────────┼─────────┼─────────┼─────────┼─────────┤
// NONE | CMD Z   | CMD X   | CMD C   | CMD V   | SHIFT   | | = +     | :       | ,       | .       | / |     | NONE
//      ╰─────────┴─────────┼─────────┼─────────┼─────────┤ ├─────────┼─────────┼─────────┼─────────┴─────────╯
//                          |         |         |         | |         |         | - _     |
//                          ╰─────────┴─────────┴─────────╯ ╰─────────┴─────────┴─────────╯

// ------------------------------------------------------------------------------------------------------------------------------------------------
//  |     1     |     2     |     3     |     4     |     5     |     |     6     |     7     |     8     |     9     |     0     |
&kp ESC      &kp ESC       &kp LC(A)       &trans       &trans       &kp BSPC             &kp N6       &kp N7       &kp N8       &kp N9       &kp N5 &kp ESC

//  |     Ae     |     Se     |     Oe     |     Ue     |     G     |     |     LEFT   |     DOWN   |     UP   |     RIGHT   |     '/"   |
  &kp ESC     &kp TAB  &sk LCTRL  &sk LALT      &sk LGUI  &kp RET              &kp N0   &kp N1   &kp N2    &kp N3    &kp N4 &kp ESC

//  |     Z     |     X     |     C     |     V     |     B     |     |     N     |     M     |     ,     |     .   |     \/"|" |
  &kp ESC     &cmd_z  &cmd_x  &cmd_c  &cmd_v  &kp LSHIFT              &kp EQUAL        &kp COLON       &kp COMMA   &kp DOT   &kp SLASH &kp ESC

//                          |  ALT/ESC  | LEFT/BKSP | CTRL/ENT  |     | SHIFT/SPC | RIGHT/TAB |  CMD/DEL  |
                                            &trans  &trans  &trans  &trans  &trans  &kp MINUS  
                                            >;
                };

                nav_layer {
                  bindings = <
// ------------------------------------------------------------------------------------------------------------------------------------------------
//  |     1     |     2     |     3     |     4     |     5     |     |     6     |     7     |     8     |     9     |     0     |
&kp ESC      &kp ESC       &kp LCTRL       &kp LALT       &kp LGUI       &kp BSPC             &kp C_PREV       &kp C_PP       &kp C_NEXT       &kp C_VOL_DN       &kp C_VOL_UP &kp ESC

//  |     Ae     |     Se     |     Oe     |     Ue     |     G     |     |     LEFT   |     DOWN   |     UP   |     RIGHT   |     '/"   |
  &kp ESC     &kp TAB  &sk LCTRL  &sk LALT      &sk LGUI  &kp RET              &kp LEFT  &kp DOWN   &kp UP    &kp RIGHT    &kp C_BRI_UP &kp ESC

//  |     Z     |     X     |     C     |     V     |     B     |     |     N     |     M     |     ,     |     .   |     \/"|" |
  &kp ESC     &cmd_z  &cmd_x  &cmd_c  &cmd_v  &kp LSHIFT              &trans        &trans       &trans   &trans   &kp C_BRI_DN &kp ESC

//                          |  ALT/ESC  | LEFT/BKSP | CTRL/ENT  |     | SHIFT/SPC | RIGHT/TAB |  CMD/DEL  |
                                            &trans  &trans  &trans  &trans  &trans  &trans  
                                            >;
                };

                symbols_layer {
                  bindings = <
// ------------------------------------------------------------------------------------------------------------------------------------------------
//  |     1     |     2     |     3     |     4     |     5     |     |     6     |     7     |     8     |     9     |     0     |
  &kp ESC     &kp EXCL  &kp AT  &kp HASH      &kp DLLR     &kp PERCENT            &kp CARET      &kp AMPS      &kp STAR      &kp DQT      &kp PIPE &kp ESC

//  |     Ae     |     Se     |     Oe     |     Ue     |     G     |     |     LEFT   |     DOWN   |     UP   |     RIGHT   |     '/"   |
 &kp ESC     &kp GRAVE  &kp LBKT  &kp LBRC      &kp LPAR  &kp LT              &kp EQUAL  &kp MINUS    &kp COLON    &kp SEMI    &kp BSLH &kp ESC

//  |     Z     |     X     |     C     |     V     |     B     |     |     N     |     M     |     ,     |     .   |     \/"|" |
  &kp ESC     &kp TILDE  &kp RBKT  &kp RBRC  &kp RPAR  &kp GT              &kp PLUS        &kp UNDER       &kp COMMA   &kp DOT   &kp FSLH &kp ESC

//                          |  ALT/ESC  | LEFT/BKSP | CTRL/ENT  |     | SHIFT/SPC | RIGHT/TAB |  CMD/DEL  |
                                            &trans  &trans  &trans  &trans  &trans  &trans  
                                            >;
                };

                modifier_right_layer {
                  bindings = <
//      ╭─────────┬─────────┬─────────┬─────────┬─────────╮ ╭─────────┬─────────┬─────────┬─────────┬─────────╮
// NONE |         |         |         |         |         | |         |         |CAPS_WORD|CAPS_LOCK|         | NONE
//      ├─────────┼─────────┼─────────┼─────────┼─────────┤ ├─────────┼─────────┼─────────┼─────────┼─────────┤
// NONE |         |         |         |         |         | |         | OS GUI  | OS ALT  | OS CTRL |         | NONE
//      ├─────────┼─────────┼─────────┼─────────┼─────────┤ ├─────────┼─────────┼─────────┼─────────┼─────────┤
// NONE |         |         |         |         |         | | SHIFT   |         |         |         |         | NONE
//      ╰─────────┴─────────┼─────────┼─────────┼─────────┤ ├─────────┼─────────┼─────────┼─────────┴─────────╯
//                          |         |         |         | |         |         |         |
//                          ╰─────────┴─────────┴─────────╯ ╰─────────┴─────────┴─────────╯


&kp ESC   &trans   &trans   &trans   &trans   &trans             &trans       &trans     &caps_word   &kp CAPSLOCK   &trans   &kp ESC
&kp ESC   &trans   &trans   &trans   &trans   &trans             &kp N0       &sk LGUI   &sk LALT     &sk LCTRL      &trans   &kp ESC
&kp ESC   &trans   &trans   &trans   &trans   &trans             &kp RSHIFT   &trans     &trans       &trans         &trans   &kp ESC
                            &trans   &trans   &trans             &trans       &trans     &trans  
                                            >;
                };

                two_middle_layer {
                  bindings = <
// ------------------------------------------------------------------------------------------------------------------------------------------------
//  |     1     |     2     |     3     |     4     |     5     |     |     6     |     7     |     8     |     9     |     0     |
   &kp ESC    &trans  &trans  &trans      &trans      &trans            &trans      &trans      &trans      &trans      &trans &kp ESC

//  |     Ae     |     Se     |     Oe     |     Ue     |     G     |     |     LEFT   |     DOWN   |     UP   |     RIGHT   |     '/"   |
  &kp ESC  &de_ae &de_eszett &de_ue &de_oe &euro_sign             &bt BT_CLR   &bt BT_SEL 0   &bt BT_SEL 1    &bt BT_SEL 2    &trans &kp ESC

//  |     Z     |     X     |     C     |     V     |     B     |     |     N     |     M     |     ,     |     `/~   |     \/"|" |
  &kp ESC     &trans  &trans  &trans  &trans  &trans              &kp RSHIFT        &trans       &trans   &trans   &trans &kp ESC

//                          |  ALT/ESC  | LEFT/BKSP | CTRL/ENT  |     | SHIFT/SPC | RIGHT/TAB |  CMD/DEL  |
                                            &trans  &trans  &trans  &trans  &trans  &trans  
                  >;
                };




        };

};
